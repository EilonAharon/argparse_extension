import argparse
import warnings

class DependentArgument(argparse.Action):
    """
    Custom argparse action to handle dependent arguments, order-independently.

    This action allows an argument to be dependent on one or more other arguments.
    The evaluation of the dependent argument is delayed until all arguments have been processed.

    Attributes:
        required_args (list): The names of the arguments that this argument depends on.
    """

    def __init__(self, option_strings, dest=None, required_args=None, **kwargs):
        """
        Initialize the DependentArgument action.

        Args:
            option_strings (list): The option strings for the argument.
            dest (str): The name of the attribute to be added to the object returned by parse_args().
            required_args (list): The names of the arguments that this argument depends on.
            **kwargs: Additional keyword arguments passed to the Action constructor.

        Raises:
            ValueError: If required_args is not provided or is not a list of strings.
        """
        if required_args is None or not isinstance(required_args, list) or not all(isinstance(arg, str) for arg in required_args):
            raise ValueError("required_args must be a list of strings")
        
        self.required_args = required_args
        super().__init__(option_strings, dest, **kwargs, nargs=0, default=argparse.SUPPRESS)

    def __call__(self, parser, namespace, values, option_string=None):
        """
        Called when the argument is encountered during argument parsing.

        This method stores the option_string and values for later processing.

        Args:
            parser (ArgumentParser): The ArgumentParser object.
            namespace (Namespace): The Namespace object that will be returned by parse_args().
            values: The value of the argument.
            option_string (str): The option string used to invoke this action.
        """
        setattr(namespace, f'_{self.dest}_details', (option_string, values, self))

    @classmethod
    def process_dependencies(cls, namespace):
        """
        Process all dependent arguments after initial parsing is complete.

        This class method should be called after parse_args() to evaluate and set dependent arguments.

        Args:
            namespace (Namespace): The Namespace object returned by parse_args().
        """
        for name, value in vars(namespace).items():
            if name.startswith('_') and name.endswith('_details'):
                option_string, values, action = getattr(namespace, name)
                dest = name[1:-8]  # Remove leading '_' and trailing '_details'

                if any(getattr(namespace, arg, None) for arg in action.required_args):
                    setattr(namespace, dest, values)
                else:
                    formatted_args = action.format_arg_names(namespace._parser)
                    warnings.warn(f"Ignoring {option_string} because none of {', '.join(formatted_args)} are set.")

    def format_arg_names(self, parser):
        """
        Format the required argument names based on how they are configured in the parser.

        Args:
            parser (ArgumentParser): The ArgumentParser object.

        Returns:
            list: Formatted argument names.
        """
        formatted_args = []
        for action in parser._actions:
            if action.dest in self.required_args:
                if action.option_strings:
                    formatted_args.append(action.option_strings[0])  # Use the first option string
                else:
                    formatted_args.append(action.dest)  # Use the destination for positional arguments
        return formatted_args

