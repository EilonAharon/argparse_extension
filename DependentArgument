import argparse
import warnings

class DependentArgument(argparse.Action):
    """
    Custom argparse action to handle dependent arguments.

    This action allows an argument to be dependent on one or more other arguments.
    If any of the required arguments are set, this action will store the dependent argument's value.
    If none of the required arguments are set, it will ignore the dependent argument and issue a warning.

    Attributes:
        required_args (list): The names of the arguments that this argument depends on.
    """

    def __init__(self, option_strings, dest=None, required_args=None, **kwargs):
        """
        Initialize the DependentArgument action.

        Args:
            option_strings (list): The option strings for the argument.
            dest (str): The name of the attribute to be added to the object returned by parse_args().
            required_args (list): The names of the arguments that this argument depends on.
            **kwargs: Additional keyword arguments passed to the Action constructor.

        Raises:
            ValueError: If required_args is not provided or is not a list of strings.
        """
        if required_args is None or not isinstance(required_args, list) or not all(isinstance(arg, str) for arg in required_args):
            raise ValueError("required_args must be a list of strings")
        
        self.required_args = required_args
        super().__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        """
        Called when the argument is encountered during argument parsing.

        If any of the required arguments are set, this method sets the value for the dependent argument.
        If none of the required arguments are set, it issues a warning and does not set the value.

        Args:
            parser (ArgumentParser): The ArgumentParser object.
            namespace (Namespace): The Namespace object that will be returned by parse_args().
            values: The value of the argument.
            option_string (str): The option string used to invoke this action.

        Raises:
            AttributeError: If any of the required_args are not valid argument names.
        """
        for arg in self.required_args:
            if not hasattr(namespace, arg):
                raise AttributeError(f"'{arg}' is not a valid argument name")
        
        if any(getattr(namespace, arg) for arg in self.required_args):
            setattr(namespace, self.dest, values)
        else:
            warnings.warn(f"Ignoring {option_string} because none of {', '.join(self.required_args)} are set.")
